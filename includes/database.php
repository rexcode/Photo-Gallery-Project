<?php  

require ('config.php');

class MySQLiDatabase{

// Include as many as methods as possible so in case of 
// different DB massive rewrite of code is not required
// only need to change the class details.	

	private $dbc;
	public  $last_query;
	private $magic_quotes_active;
	private $real_escape_string_exists;

	public function __construct(){
		$this->open_connection();
		$this->magic_quotes_active = get_magic_quotes_gpc();// Since php = 5.4 magic quotes removed
		$this->real_escape_string_exists = function_exists( "mysqli_real_escape_string" );//i.e.PHP >= v4.3.0
	}

	public function open_connection(){
		$this->dbc = mysqli_connect(DB_SERVER, DB_USER, DB_PASS, DB_NAME);
		if (!$this->dbc) {
			die("Database connection failed.".mysqli_error());
		}
	}

	public function close_connection(){
		if (isset($this->dbc)) {
			mysqli_close($this->dbc);
			unset($this->dbc);
		}
	}

	public function query($sql){
		$this->last_query = $sql;
		// for Select query $result will return a table / resource link or false
		// for insert update delete $result will return a true or false
		$result = mysqli_query($this->dbc, $sql);
		//$result = mysqli->query($sql); // in case of mysqli oop...
		$this->confirm_query($result);
		return $result;
	}

private function confirm_query($result){
		if (!$result) { //mysqli_query can be subsituted as a method
			$output  = "Die connection failed. ".mysqli_error($this->dbc)."<br>";
			// only for testing and not production
			$output .= "Last SQL Query  -  ".$this->last_query; 
			die($output);
		}
	}


	public function fetch_assoc($result_set){
	// Fetch a result row as an associative array
		return mysqli_fetch_assoc($result_set);
	}

	public function num_rows($result_set){
	// 	Returns the number of rows in the result set using SELECT query.
		return mysqli_num_rows($result_set);
	}

	public function insert_id(){ 
	// Get the last id inserted over the current db connection
	// The mysqli_insert_id() function returns the ID generated by a query on a table with a column having the AUTO_INCREMENT attribute. If the last query wasn't an INSERT or UPDATE statement or if the modified table does not have a column with the AUTO_INCREMENT attribute, this function will return zero.
    // Note: Performing an INSERT or UPDATE statement using the LAST_INSERT_ID() function will also modify the value returned by the mysqli_insert_id() function.
		return mysqli_insert_id($this->dbc);
	}
	
	public function affected_rows(){
	// Returns the number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query.	
		return mysqli_affected_rows($this->dbc);
	}	

	// undo any magic quote effects so mysql_real_escape_string can do the work
	// Since php = 5.4 magic quotes removed
	//php >= 4.3 mysqli_real_escape_string added
	// Function escape_value modified as per our current situation
	public function escape_value( $value ) { //We pass the SQL to make it safe
		if( $this->real_escape_string_exists ) { // PHP v4.3.0 or higher
		// undo any magic quote effects so mysql_real_escape_string can do the work
		if( $this->magic_quotes_active ) { $value = stripslashes( $value ); }
		$value = mysqli_real_escape_string( $this->dbc, $value );
	} else { // before PHP v4.3.0
		// if magic quotes aren't already on then add slashes manually
		//if( !$magic_quotes_active ) { $value = addslashes( $value ); }
		if (!$this->magic_quotes_active) { //this is reduntant
			$value = mysqli_real_escape_string($this->dbc, $value);
		}
		// if magic quotes are active, then the slashes already exist
	}
	return $value;
	}

}

$database = new MySQLiDatabase();
$db =& $database; //using reference object

?>